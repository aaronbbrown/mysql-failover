# mode can be mysql or observer
mode: mysql
mysql:
# Connection info for how this daemon will connect to the local
# MySQL server.  The following permissions are needed:
#
# * All privileges on the failover database (specified in the URL)
# * SUPER (for controlling slave threads and setting read_only)
#
# GRANT ALL PRIVILEGES ON #{db}.* TO '#{user}'@'%' IDENTIFIED BY '#{password'};
# GRANT SUPER ON *.* TO '#{user}'@'%';
#
  uri: jdbc:mysql://mysql2.vagrant.dev/failover
  user: failover
  password: failover
# if it takes more than this amount of time for the tracker
# to replicate over, consider the current active master dead
# and fail over
  tracking_max_wait_secs: 60

# poll the tracking table every #{tracking_poll_secs} for the
# replication tracker
  tracking_poll_interval_secs: 5

# WHEN THIS SERVER IS ACTIVE, the k/v pairs below client_data
# will be persisted to the zookeeper.client_data_znode znode
# as a JSON string.
#
# Can be any arbitrary k/v pairs that the MySQL clients understand, but
# probably should include the MySQL host and port at a minimum.
  client_data:
    mysql_host: mysql2.vagrant.dev
    mysql_port: 3306

zookeeper:
  hosts:
  - zk1.vagrant.dev:2181
  - zk2.vagrant.dev:2181
  - zk3.vagrant.dev:2181
  chroot: /dev/app/mysql_failover

# server_id needs to be unique amongst all watchers as it is used to determine
# who is active and who is passive.  It can be any String or Integer
  server_id: mysql2.vagrant.dev
  active_master_id_znode: /active_master_id

# client_data_znode is watched by the clients and when this value
# changes, triggers a startup of the client service and signifies that
# failover has been completed on the MySQL side. Will contain
# the contents of mysql.client_data above.
  client_data_znode: /client_data
  state_znode: /state
